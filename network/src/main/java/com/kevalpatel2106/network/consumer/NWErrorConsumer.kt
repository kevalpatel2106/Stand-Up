package com.kevalpatel2106.network.consumer

import com.kevalpatel2106.network.APIStatusCodes
import com.kevalpatel2106.network.NWException
import com.kevalpatel2106.network.NetworkConfig
import io.reactivex.functions.Consumer
import retrofit2.HttpException
import java.net.SocketTimeoutException
import java.net.UnknownHostException

/**
 * Created by Keval on 12/11/17.
 * This class consumes error generated by the network call of retrofit. This will convert the exceptions
 * generated by the retrofit client and turn it into the meaning full messages.
 *
 * @author 'https://github.com/kevalpatel2106'
 */
@Deprecated("Not use")
abstract class NWErrorConsumer : Consumer<Throwable> {
    /**
     * Consume the given value.
     *
     * @param throwable the value
     *
     * @throws Exception on error
     */
    @Throws(Exception::class)
    override fun accept(throwable: Throwable) {
        val errorCode: Int
        val message: String

        when (throwable) {
            is NWException -> {  //Exception/Error in the server response.
                //Internet not available.
                errorCode = throwable.errorCode
                message = throwable.message ?: NetworkConfig.ERROR_MESSAGE_SOMETHING_WRONG

                onError(errorCode, message)
            }
            is HttpException -> { //Error frm the server. (e.g. 500)
                //Nothing in response body
                errorCode = APIStatusCodes.ERROR_CODE_UNKNOWN_ERROR
                message = NetworkConfig.ERROR_MESSAGE_SOMETHING_WRONG

                onError(errorCode, message)
            }
            is UnknownHostException -> {    //Cannot resolve host.
                //Internet not available.
                onInternetUnavailable(NetworkConfig.ERROR_MESSAGE_INTERNET_NOT_AVAILABLE)
            }
            is SocketTimeoutException -> {  //Cannot connect to the server.
                //Internet not available.
                onInternetUnavailable(NetworkConfig.ERROR_MESSAGE_INTERNET_NOT_AVAILABLE)
            }
            else -> {     //Any other unknown exception.
                //Any other exception
                errorCode = APIStatusCodes.ERROR_CODE_UNKNOWN_ERROR
                message = NetworkConfig.ERROR_MESSAGE_SOMETHING_WRONG

                onError(errorCode, message)
            }
        }
    }

    /**
     * Implement this method the get the error code for the request and get the message to show to
     * to the user.
     */
    abstract fun onError(code: Int, message: String)

    /**
     * Implement this method the get the error when application cannot connect to the server or the
     * internet is down.
     */
    abstract fun onInternetUnavailable(message: String)
}
