/*
 *  Copyright 2018 Keval Patel.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

apply plugin: 'com.android.library'
modulePlugins.each { plugins.apply(it) }

android {
    signingConfigs signingConfig

    compileSdkVersion buidlConfig.compile
    buildToolsVersion buidlConfig.buildToolVersion

    defaultConfig libDefaultConfig

    buildTypes {
        release {
            signingConfig signingConfigs.playStore
            resValue "string", "server_client_id", RELEASE_SERVER_CLIENT_ID
            resValue "string", "facebook_app_id", RELEASE_FACEBOOK_APP_ID
            resValue "string", "application_name", RELEASE_APPLICATION_NAME
            buildConfigField "String", "BASE_URL", "\"" + RELEASE_SERVER_BASE_URL + "\""
        }
        debug {
            crunchPngs false
            testCoverageEnabled true

            signingConfig signingConfigs.debugKey
            resValue "string", "application_name", DEBUG_APPLICATION_NAME
            resValue "string", "server_client_id", SERVER_CLIENT_ID
            resValue "string", "facebook_app_id", FACEBOOK_APP_ID
            buildConfigField "String", "BASE_URL", "\"" + SERVER_BASE_URL + "\""
        }
    }

    compileOptions compileOption
    packagingOptions packageExcludes
    lintOptions lintOption
    aaptOptions aaptOption
    dexOptions dexOption
    testOptions testOption
    adbOptions adbOption
}

dokka dokkaConfig
kotlin kotlinOption

dependencies {
    implementation project(':utils')
    implementation project(':common')
    implementation project(':network')
    implementation project(':core')
    implementation project(':progress-button')
    implementation project(':facebook-auth')
    implementation project(':google-auth')
    testImplementation project(':test-utils')
    androidTestImplementation project(':test-utils')

    ide.each { add("implementation", it) }
    rxLib.each { add("implementation", it) }
    debugLibs.each { add(it.configuration, it.dependency) }
    dagger.each { add(it.configuration, it.dependency) }

    //Butter knife
    implementation(butterKnifeLib.butterKnife, excludeGrp)
    kapt(butterKnifeLib.annotationProcessor, excludeGrp)

    //Support
    implementation supportLib.appCompat
    implementation supportLib.supportv4
    implementation supportLib.design

    //Room & Arch components
    implementation archComponent.lifecycle

    implementation retrofitLib.retrofit
    implementation(otherLib.gson, excludeGrp)

    implementation(firebaseLib.core, excludeGrp)
    implementation(firebaseLib.fcm, excludeGrp)
    implementation(otherLib.lottie, excludeGrp)
}
