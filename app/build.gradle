/*
 *  Copyright 2018 Keval Patel.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
modulePlugins.each { plugins.apply(it) }
//https://stackoverflow.com/a/47050632/4690731
//apply plugin: 'com.google.firebase.firebase-perf'

android {
    signingConfigs signingConfig
    compileSdkVersion buidlConfig.compile
    buildToolsVersion buidlConfig.buildToolVersion

    defaultConfig {
        applicationId buidlConfig.applicationId
        multiDexEnabled true

        //sdks
        minSdkVersion buidlConfig.min
        targetSdkVersion buidlConfig.target

        //CheckVersionResponse config
        versionName String.format('%d.%d', versionConfig.versionMajor, versionConfig.versionMinor)
        versionCode versionConfig.versionCode

        //strip other than english resources
        resConfigs "en"

        testInstrumentationRunner "com.kevalpatel2106.testutils.CustomTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), proguardConfig.proguardPath, proguardConfig.removeLogs
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            signingConfig signingConfigs.playStore
            shrinkResources true
            pseudoLocalesEnabled false
            zipAlignEnabled true

            buildConfigField "String", "BASE_URL", "\"" + RELEASE_SERVER_BASE_URL + "\""
            resValue "string", "application_name", DEBUG_APPLICATION_NAME
            resValue "string", "package_name", DEBUG_PACKAGE_ID
            resValue "string", "api_host", "\"" + RELEASE_SERVER_BASE_URL.replace("https://", "") + "\""
            resValue "string", "server_client_id", RELEASE_SERVER_CLIENT_ID
            resValue "string", "facebook_app_id", RELEASE_FACEBOOK_APP_ID
            resValue "string", "android_api_key", RELEASE_ANDROID_API_KEY
        }
        debug {
            crunchPngs false
            testCoverageEnabled false   //https://stackoverflow.com/a/47050632/4690731
            debuggable true
            jniDebuggable true
            renderscriptDebuggable false
            signingConfig signingConfigs.debugKey
            minifyEnabled false
            zipAlignEnabled true

            buildConfigField "String", "BASE_URL", "\"" + SERVER_BASE_URL + "\""
            resValue "string", "application_name", RELEASE_APPLICATION_NAME
            resValue "string", "package_name", RELEASE_PACKAGE_ID
            resValue "string", "api_host", "\"" + SERVER_BASE_URL.replace("https://", "") + "\""
            resValue "string", "server_client_id", SERVER_CLIENT_ID
            resValue "string", "facebook_app_id", FACEBOOK_APP_ID
            resValue "string", "android_api_key", ANDROID_API_KEY
        }
    }

    compileOptions compileOption
    packagingOptions packageExcludes
    lintOptions lintOption
    aaptOptions aaptOption
    dexOptions dexOption
    testOptions testOption
    adbOptions adbOption
    dexcount dexcountOptions
}

dokka dokkaConfig
kotlin kotlinOption

dependencies {
    implementation project(':common')
    implementation project(':utils')
    implementation project(':core')
    implementation project(':facebook-auth')
    implementation project(':progress-button')
    implementation project(':google-auth')
    implementation project(':ruler-view')
    implementation project(':timeline-view')
    implementation project(':spinner-time-picker')

    //Test dependency
    testImplementation project(':test-utils')
    androidTestImplementation project(':test-utils')
    testImplementation(otherLib.roboElectric, excludeGrp)

    ide.each { add("implementation", it) }
    anko.each { add("implementation", it) }
    rxLib.each { add("implementation", it) }
    debugLibs.each { add(it.configuration, it.dependency) }

    //Butter knife
    implementation(butterKnifeLib.butterKnife, excludeGrp)
    kapt(butterKnifeLib.annotationProcessor, excludeGrp)

    dagger.each { add(it.configuration, it.dependency) }

    //Support
    implementation supportLib.appCompat
    implementation supportLib.supportv4
    implementation(supportLib.recyclerView, excludeGrp)
    implementation(supportLib.cardView, excludeGrp)
    implementation supportLib.multidex
    implementation supportLib.design
    implementation supportLib.prefrance
    implementation supportLib.prefrancev14
    implementation(supportLib.customtabs, excludeGrp)

    //Arch component
    implementation archComponent.lifecycle
    kapt archComponent.lifecycleAnotations

    //Firebase
    implementation(firebaseLib.preformance, excludeGrp)
    implementation(firebaseLib.core, excludeGrp)
    implementation(firebaseLib.fcm, excludeGrp)
    implementation(firebaseLib.invites, excludeGrp)

    //Glide
    implementation(otherLib.glide, excludeGrp)
    kapt(otherLib.glideAnnotation, excludeGrp)

    //Other libs
    implementation retrofitLib.retrofit
    implementation(kevalpatel2106.ringtonePicker, excludeGrp)
    implementation(otherLib.bottomsheet, excludeGrp)
    implementation(otherLib.circleImagView, excludeGrp)
    implementation(otherLib.aboutlibraries, excludeGrp)
    implementation(otherLib.chartLayout, excludeGrp)
    implementation(otherLib.openSourceLibraries) { transitive = true }
    releaseImplementation(otherLib.crashalytics) { transitive = true }

    implementation('com.philliphsu:bottomsheetpickers:2.3.2')
}
apply plugin: 'com.google.gms.google-services'
