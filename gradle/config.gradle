/*
 *  Copyright 2018 Keval Patel.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

ext {
    signingConfig = {
        //This are th play store signing config.
        playStore {
            keyAlias ReleaseConfig.RELEASE_KEYSTORE_ALIAS
            keyPassword ReleaseConfig.RELEASE_KEYSTORE_PASSWORD
            storeFile file(ReleaseConfig.RELEASE_KEYSTORE_FILE)
            storePassword ReleaseConfig.RELEASE_KEYSTORE_ALIASPASSWORD
        }
        debugKey {
            keyAlias DebugConfig.KEYSTORE_ALIAS
            keyPassword DebugConfig.KEYSTORE_PASSWORD
            storeFile file(DebugConfig.KEYSTORE_FILE)
            storePassword DebugConfig.KEYSTORE_ALIASPASSWORD
        }
    }

    defaultAppConfig = {
        applicationId DefaultConfig.applicationId
        multiDexEnabled CompilerCofig.IS_MULTIDEX_ENABLED

        //sdks
        minSdkVersion DefaultConfig.min
        targetSdkVersion DefaultConfig.target

        //CheckVersionResponse config
        versionName AppVersion.versionName
        versionCode AppVersion.versionCode

        //strip other than english resources
        resConfigs DefaultConfig.supportedResConfig

        testInstrumentationRunner DefaultConfig.testRunnerClass

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": DefaultConfig.schemaPath.toString()]
            }
        }
    }

    libDefaultConfig = {
        //sdks
        minSdkVersion DefaultConfig.min
        targetSdkVersion DefaultConfig.target

        //strip other than english resources
        resConfigs DefaultConfig.supportedResConfig

        //CheckVersionResponse config
        versionName AppVersion.versionName
        versionCode AppVersion.versionCode

        consumerProguardFiles ProguardFiles.proguard, ProguardFiles.removeLogs

        testInstrumentationRunner DefaultConfig.testRunnerClass

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": DefaultConfig.schemaPath.toString()]
            }
        }
    }

    packageExcludes = {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
        exclude 'protobuf.meta'
    }

    //Exclude group for dependency
    excludeGrp = {
        exclude group: 'com.android.support.test.espresso', module: 'espresso-core'
        exclude group: 'com.android.support.test.espresso', module: 'espresso-idling-resource'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-fragment'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'android.arch.lifecycle', module: 'common'
        exclude group: 'android.arch.core', module: 'common'
        exclude group: 'android.arch.core', module: 'common'
        exclude group: 'android.arch.lifecycle', module: 'runtime'
        exclude group: 'com.jakewharton.timber', module: 'timber'
        exclude group: 'io.reactivex.rxjava2', module: 'rxjava'
    }

    lintOption = {
        abortOnError CompilerCofig.LINT_ABORT_ON_ERROR
        htmlReport true
        xmlReport true
        textReport true
        disable 'InvalidPackage'
    }

    aaptOption = {
        cruncherProcesses CompilerCofig.CRUNCHER_PROCESS_COUNT
    }

    compileOption = {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dokkaConfig = {
        outputFormat = 'javadoc'
        outputDirectory = "./doc"
        jdkVersion = 8 // Used for linking to JDK

        // Use to include or exclude non public members.
        includeNonPublic = false

        // Do not output deprecated members. Applies globally, can be overridden by packageOptions
        skipDeprecated = false

        // Emit warnings about not documented members. Applies globally, also can be overridden by packageOptions
        reportNotDocumented = true

        skipEmptyPackages = true // Do not create index pages for empty packages
    }

    dexcountOptions = {
        format = "list"
        includeClasses = false
        includeClassCount = false
        includeFieldCount = true
        includeTotalMethodCount = false
        orderByMethodCount = false
        verbose = false
        maxTreeDepth = Integer.MAX_VALUE
        teamCityIntegration = false
        teamCitySlug = null
        runOnEachPackage = true
        maxMethodCount = CompilerCofig.MAX_METHOD_COUNT
    }
    adbOption = {
        timeOutInMs CompilerCofig.ADB_TIMEOUT
    }

    dexOption = {
        preDexLibraries CompilerCofig.PREDEX_LIBRARIES
        maxProcessCount CompilerCofig.MAX_DEX_PROCESS_COUNT
    }

    testOption = {
        unitTests.all {
            minHeapSize = "1024m"

            // set heap size for the test JVM(s)
            maxParallelForks 1
            maxHeapSize = "1596m"

            testLogging {
                events 'passed', 'skipped', 'failed'
            }
        }
    }

    kotlinOption = {
        jvmTarget = "1.8"
    }
}
